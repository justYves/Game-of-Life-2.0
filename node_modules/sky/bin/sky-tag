#!/usr/bin/env node

'use strict'

var program = require('commander')
  , fs = require('fs-extra')
  , path = require('path')
  , sky = require('../lib/sky')
  , _ = require('underscore')
  , S = require('string')
  , P = require('autoresolve')
  , cl = require('cl')
  , colors = require('colors')
  , SkyEnv = require('sky-env').SkyEnv
  , DocIter = require('../lib/doc_iterator')
  , sorto = require('sorto')
  , tag = require('../lib/tag')
  , mde = require('markdown-extra')

var BATCH_LIMIT = 32

program.version(require('../package'))
  .option('-n, --list-by-name', 'Output tags with their counts sorted by name.')
  .option('-c, --list-by-count', 'Output tags with ther counts sorted by count.')
  .option('-r, --rename', 'Rename tags.')
  .parse(process.argv)

var _baseDir = sky.findBaseDirSync()
if (!_baseDir) cl.exit(100,"Can't find the sky/config.json. Are you sure you're in a Sky site?")
var _skyEnv = new SkyEnv(_baseDir)
_skyEnv.loadConfigsSync()
  
var configs = _skyEnv.configs//sky.loadConfigsSync(_baseDir)
if (configs.errors['config']) cl.exit(101, 'Could not parse sky/config.json. Is there an error in the JSON?')

if (program.listByName) return list(printByTag)
if (program.listByCount) return list(printByCount)
if (program.rename) return rename()

//no args
return list(printByTag)

function list (fn) {
  var tags = {}

  DocIter({path: _skyEnv.path('articles')})
  .document(function(err, res, next) {
    if (err) {
      console.error(err)
      return next()
    }

    var mdp = res.document
    if (mdp.metadata.tags) 
      tag.tagCount(tags, mdp.metadata.tags)
    
    next()
  })
  .end(function() {
    fn(tags)
  })
}

function rename () {
  if (program.args.length != 2) {
    console.error(colors.red("\nInvalid number of parameters for tag renaming.\n"))
    console.error("  example:\n")
    console.error("    to rename all tags from visual_basic to Visual Basic:\n")
    console.error('    sky tag --rename visual_basic "Visual Basic"\n')
    return
  }

  var find = program.args[0]
    , replace = program.args[1]


  DocIter({path: _skyEnv.path('articles')})
  .document(function(err, res, next) {
    if (err) {
      console.error(err)
      return next()
    }

    var mdp = res.document
    if (mdp.metadata.tags) {
      var ndx = mdp.metadata.tags.indexOf(find)
      if (ndx >= 0) {
        //would use mdp.writeFile, but it sucks shit
        fs.readFile(res.file, 'utf8', function(err, data) {
          if (err) {
            console.error(err)
            return next()
          }

          var metadata = mde.metadata(data)
          var pos1 = metadata.indexOf('tags:')
          pos1 = metadata.lastIndexOf('\n', pos1)
          var pos2 = metadata.indexOf('\n', pos1+1)
          var tagLine = metadata.substring(pos1, pos2)
          tagLine = tagLine.trim()
          var replaceLine = tagLine.replace(find, replace)

          var data = data.replace(tagLine, replaceLine)
          fs.writeFile(res.file, data, next)
        })
      }
    }
    
    next()
  })
  .end(function() {
    console.log('done')
  })
}


function printByTag (tags) {
  tags = sorto.bykey(tags, function(s) { return s.toLowerCase() })

  console.log('')
  var max = tag.maxTagLen(tags)
  
  tags.forEach(function(tag) {
    var tagName = sorto.k(tag)
      , count = sorto.v(tag)
    prettyPrintItem(max, tagName, count)
  }) 

  console.log('')
}

function printByCount (tags) {
  tags = sorto.byval(tags, function(n) { return -1 * parseInt(n) })

  console.log('')  
  tags.forEach(function(tag) {
    var tagName = sorto.k(tag)
      , count = sorto.v(tag)
    prettyPrintItem(4, count, tagName)
  }) 

  console.log('')
}

function prettyPrintItem (maxLeftLen, left, right) {
  var offsetLeft = 4 + maxLeftLen
  console.log(colors.cyan(S(left).padLeft(offsetLeft).s) + ' : ' + colors.green(right) )
}





