#!/usr/bin/env node

"use strict"

var program = require('commander')
  , fs = require('fs-extra')
  , path = require('path')
  , sky = require('../lib/sky')
  , P = require('autoresolve')
  , colors = require('colors')
  , SkyEnv = require('sky-env').SkyEnv
  , DocIter = require('../lib/doc_iterator')
  , sutil = require('../lib/util')
  , tmpl = require('../lib/template_file')
  , genIndex = require('../lib/genindex')
  , util = require('util')
  , di = require(P('lib/doc_info'))
  , bin = require(P('lib/bin'))
  , tag = require(P('lib/tag'))
  , S = require('string')

require('shelljs/global')

var _skyEnv = null
  , _baseDir = null
  , _outputArticles = {}
  , _tagCounts = {}

program.version(require('../package'))
  .option('-d, --dir [outputDir]', 'The output directory for the files.') //<--- TODO: not so sure this description is correct
  .parse(process.argv)

if (program.dir) process.chdir(program.dir)

var _skyEnv = bin.initSync()
  , templateFiles = sutil.loadThemePathsSync(_skyEnv)

var assetsDir = path.join(_skyEnv.themeDir, 'assets')
if (test('-d', assetsDir)) {
  console.log('\n  copying theme assets...')
  var outputAssetsDir = path.join(_skyEnv.outputDir, 'assets') 
  if (test('-d', outputAssetsDir))
    rm('-rf', outputAssetsDir)  
  cp('-r', assetsDir, _skyEnv.outputDir)  
}

console.log('\n  building articles...')

var lastBuild = _skyEnv.lastBuild
var moddate1 = fs.lstatSync(templateFiles.layout).mtime
var moddate2 = fs.lstatSync(templateFiles.article).mtime
if (moddate1 > lastBuild) //theme file modified, invalidate and rebuild everything
  lastBuild = 0
if (moddate2 > lastBuild)
  lastBuild = 0

DocIter({path: path.join(_skyEnv.baseDir, 'articles'), lastModified: lastBuild})
.document(eachDoc)
.end(function() {
  var cfgObj = _skyEnv.configs.config
  cfgObj.set('build.lastBuild', (new Date()).toISOString())
  fs.writeJsonSync(_skyEnv.configFile, cfgObj)
  generateIndex()
});


function generateIndex() {
  console.log('\n  generating article index...')
  genIndex({skyEnv: _skyEnv, outputArticles: _outputArticles, genRSS: true}, function(err) {
    if (err) console.error(err)
  })
}

function eachDoc (err, res, next) {
  if (err) return console.error(err)
  if (!res.document.metadata.publish) return next()

  var data = di.initViewData(_skyEnv)
  di(data, res) //attach more doc info

  tag.tagCount(_tagCounts, res.document.metadata.tags)

  var absOutFile = _skyEnv.mdArticleToOutputFileWithPath(res.file, data.ctx)
  tmpl(templateFiles.article, data, function(err, html) {
    if (err) return console.error(err)
    data.sky.view = html

    tmpl(templateFiles.layout, data, function(err, html) {
      if (err) return console.error(err)

      //fill in mustache templates if exist, this method is a bit hacky, but it helps self-reference disqus slugs
      html = S(html).template(data.ctx).s

      if (res.modified) {
        //console.log('Building %s...', path.basename(file))
        prettyPrint(data.ctx)
        fs.outputFileSync(absOutFile, html)
      }

      _outputArticles[res.file] = data.ctx
      next()
    })
  })
}

function prettyPrint (article) {
  var date = sutil.datefmt(article.publishedAt)
  console.log("    %s : %s", colors.green(date), colors.cyan(article.title))
}

